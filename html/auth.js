
/**
 * Supabase Authentication for Documentation Site
 * Generated by @knowcode/doc-builder
 */

(function() {
    'use strict';
    
    // Skip auth check on login and logout pages
    const currentPage = window.location.pathname;
    if (currentPage === '/login.html' || currentPage === '/logout.html' || 
        currentPage.includes('login') || currentPage.includes('logout')) {
        return;
    }
    
    // Initialize Supabase client
    const { createClient } = supabase;
    const supabaseClient = createClient('https://placeholder.supabase.co', 'placeholder-key', {
        auth: {
            persistSession: true,
            autoRefreshToken: true,
            detectSessionInUrl: true
        }
    });
    
    // Check authentication and site access
    async function checkAuth() {
        try {
            // Check if current page is in private directory
            const currentPath = window.location.pathname;
            const isPrivatePage = currentPath.includes('/private/');
            
            // Get current user session
            const { data: { user }, error: userError } = await supabaseClient.auth.getUser();
            
            if (userError || !user) {
                // Only redirect if we're on a private page
                if (isPrivatePage) {
                    redirectToLogin();
                } else {
                    // Public page, just show it
                    document.body.classList.add('authenticated'); // Use same class to show body
                    updateAuthButton(false);
                }
                return;
            }
            
            // Check if user has access to this site
            const { data: access, error: accessError } = await supabaseClient
                .from('docbuilder_access')
                .select('*')
                .eq('user_id', user.id)
                .eq('site_id', 'placeholder-site-id')
                .single();
            
            if (accessError || !access) {
                if (isPrivatePage) {
                    showAccessDenied();
                } else {
                    // Public page, just show it
                    document.body.classList.add('authenticated');
                    updateAuthButton(false);
                }
                return;
            }
            
            // User is authenticated and has access
            console.log('User authenticated and authorized');
            document.body.classList.add('authenticated');
            updateAuthButton(true);
            
        } catch (error) {
            console.error('Auth check failed:', error);
            if (window.location.pathname.includes('/private/')) {
                redirectToLogin();
            } else {
                // Public page, show it anyway
                document.body.classList.add('authenticated');
                updateAuthButton(false);
            }
        }
    }
    
    // Redirect to login page
    function redirectToLogin() {
        const currentUrl = window.location.pathname + window.location.search;
        const loginUrl = '/login.html' + (currentUrl !== '/' ? '?redirect=' + encodeURIComponent(currentUrl) : '');
        window.location.href = loginUrl;
    }
    
    // Show access denied message
    function showAccessDenied() {
        document.body.classList.add('authenticated'); // Show the body
        document.body.innerHTML = `
            <div style="display: flex; justify-content: center; align-items: center; height: 100vh; font-family: Inter, sans-serif;">
                <div style="text-align: center; max-width: 400px;">
                    <h1 style="color: #ef4444; margin-bottom: 1rem;">Access Denied</h1>
                    <p style="color: #6b7280; margin-bottom: 2rem;">You don't have permission to view this documentation site.</p>
                    <a href="/login.html" style="background: #3b82f6; color: white; padding: 0.75rem 1.5rem; border-radius: 0.5rem; text-decoration: none;">Try Different Account</a>
                </div>
            </div>
        `;
    }
    
    // Function to update auth button
    function updateAuthButton(isAuthenticated) {
        const authBtn = document.querySelector('.auth-btn');
        if (authBtn) {
            const icon = authBtn.querySelector('i');
            if (icon) {
                if (isAuthenticated) {
                    icon.className = 'fas fa-sign-out-alt';
                    authBtn.title = 'Logout';
                    authBtn.href = '/logout.html';
                } else {
                    icon.className = 'fas fa-sign-in-alt';
                    authBtn.title = 'Login';
                    authBtn.href = '/login.html';
                }
            }
        }
    }
    
    // Add auth button functionality
    document.addEventListener('DOMContentLoaded', function() {
        const authBtn = document.querySelector('.auth-btn');
        if (authBtn) {
            authBtn.addEventListener('click', async function(e) {
                // Check if we're logged in
                const { data: { user } } = await supabaseClient.auth.getUser();
                if (user) {
                    // Logged in - sign out
                    e.preventDefault();
                    await supabaseClient.auth.signOut();
                    window.location.href = '/logout.html';
                }
                // If not logged in, normal navigation to login page will occur
            });
        }
    });
    
    // Run auth check
    checkAuth();
    
})();
